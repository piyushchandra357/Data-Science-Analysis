# -*- coding: utf-8 -*-
"""Wine_Quality_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tob2jDrGQREAU5iyPNijgH4nzKSH63Mt
"""

# Commented out IPython magic to ensure Python compatibility.
#importing of libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.svm import SVC
from pandas.plotting import parallel_coordinates
from sklearn.model_selection import train_test_split
import statsmodels.api as sm
from sklearn.metrics import mean_squared_error
# %matplotlib inline
plt.rc("font", size=14)
import seaborn as sns
sns.set(style="white") #white background style for seaborn plots
sns.set(style="whitegrid", color_codes=True)
from sklearn import datasets, linear_model
import statsmodels.formula.api as smf
!pip install pandas plotnine
from plotnine import *
from sklearn.model_selection import train_test_split
train, test = train_test_split(df, test_size=0.2, random_state=4)



from google.colab import files
uploaded = files.upload()
datawhite = pd.read_csv("winequality_white.csv")
data.head()

from google.colab import files
uploaded = files.upload()
datared = pd.read_csv("winequality_red.csv")
data.head()

datared["color"] = "R"

datawhite["color"] = "W"

df_all=pd.concat([datared,datawhite],axis=0)

df_all.head()

datawhite.rename(columns={'fixed acidity': 'fixed_acidity','citric acid':'citric_acid','volatile acidity':'volatile_acidity','residual sugar':'residual_sugar','free sulfur dioxide':'free_sulfur_dioxide','total sulfur dioxide':'total_sulfur_dioxide'}, inplace=True)

datared.rename(columns={'fixed acidity': 'fixed_acidity','citric acid':'citric_acid','volatile acidity':'volatile_acidity','residual sugar':'residual_sugar','free sulfur dioxide':'free_sulfur_dioxide','total sulfur dioxide':'total_sulfur_dioxide'}, inplace=True)

df_all.rename(columns={'fixed acidity': 'fixed_acidity','citric acid':'citric_acid','volatile acidity':'volatile_acidity','residual sugar':'residual_sugar','free sulfur dioxide':'free_sulfur_dioxide','total sulfur dioxide':'total_sulfur_dioxide'}, inplace=True)

df_all.head()

df = pd.get_dummies(df_all, columns=["color"])

"""**Assess Data Quality & Missing Values**"""

df_all.isnull().sum()

df_all.describe()

print("white mean = ",datawhite["quality"].mean())
print("red mean =",datared["quality"].mean())

d = {'color': ['red','white'], 'mean_quality': [5.636023,5.877909]}
df_mean = pd.DataFrame(data=d)
df_mean

ggplot(df_mean, aes(x='color', weight='mean_quality')) + geom_bar() +\
    labs(y = "Average Quality", title = "Average Quality by Wine Color")

"""#SUBPLOTS WHITE AND RED WINE"""

sns.countplot(x="color",data=datawhite)

sns.countplot(x="color",data=datared)

"""# **GG PLOT**"""

ggplot(df_all, aes(x='fixed_acidity', y='pH', color='color',size='quality')) + geom_point()

"""# **FACE PLOT**"""

ggplot(df_all, aes(x='alcohol', y='residual_sugar', color='color')) + geom_point() +\
    facet_wrap('quality', ncol=2) + scale_color_brewer(type = 'qual', palette = 'Dark2')

ggplot(df_all, aes(x='fixed_acidity', y='volatile_acidity', color='color')) + geom_point() + facet_wrap('quality', ncol=2)



"""CORRELATION HEAT MAPS

**WHITE WINE**
"""

plt.subplots(figsize=(10,5))
ax = plt.axes()
ax.set_title("Wine Characteristic Correlation Heatmap (Reds)")
corr = datared.corr()
sns.heatmap(corr, 
            xticklabels=corr.columns.values,
            yticklabels=corr.columns.values,
           cmap="CMRmap")

"""**RED WINE**"""

plt.subplots(figsize=(10,5))
ax = plt.axes()
ax.set_title("Wine Characteristic Correlation Heatmap (Reds)")
corr = datared.corr()
sns.heatmap(corr, 
            xticklabels=corr.columns.values,
            yticklabels=corr.columns.values,
           cmap="Reds")
plt.show()

"""# **Biggest Differences between White and Red Correlations **

# Red Pearson's Correlation - White Pearson's Correlation
There are some noteable differences in the way that certain variables interact depending on the variety of wine. The darker the square, the larger the difference that interaction is between Red and White wines.

For instance, the correlation between alcohol and sugar content is much higher for Red wines than it is for white wines (boozy reds have more sugar than less boozy reds, while boozy whites have less sugar than less boozy whites). Closer inspection indicates that the correlation between sugar and alcohol is positive for Red wines (weak positive, 0.042), but it is much more strongly negative for White wines (-0.45).
"""

df_r_corr=datared.corr()
df_w_corr=datawhite.corr()

df_r_corr

df_w_corr

diff_corr = df_r_corr - df_w_corr

"""**CORRELATION DIFFERNCE B/W RED AND WHITE WINES**"""

plt.subplots(figsize=(10,8))
ax = plt.axes()
ax.set_title("Correlation Differences between Red and White Wines")
corr = diff_corr
sns.heatmap(corr, 
            xticklabels=corr.columns.values,
            yticklabels=corr.columns.values,
           cmap="coolwarm")

results1 = smf.ols('quality ~ total_sulfur_dioxide + free_sulfur_dioxide + residual_sugar + fixed_acidity + volatile_acidity + alcohol + sulphates + pH + density + color_R', data=df).fit()
print(results1.summary())

y = train["quality"]
cols = ["total_sulfur_dioxide","free_sulfur_dioxide","residual_sugar","fixed_acidity","volatile_acidity","alcohol","sulphates","pH","density","color_R"]

X=train[cols]

regr = linear_model.LinearRegression()
regr.fit(X,y)

# Commented out IPython magic to ensure Python compatibility.
ytrain_pred = regr.predict(X)
print("In-sample Mean squared error: %.2f"
#       % mean_squared_error(y, ytrain_pred))

ytest = test["quality"]
cols = ["total_sulfur_dioxide","free_sulfur_dioxide","residual_sugar","fixed_acidity","volatile_acidity","alcohol","sulphates","pH","density","color_R"]

Xtest=test[cols]

# Commented out IPython magic to ensure Python compatibility.
ypred = regr.predict(Xtest)
print("Out-of-sample Mean squared error: %.2f"
#       % mean_squared_error(ytest, ypred))

train2, test2 = train_test_split(df, test_size=0.4, random_state=4)

y2 = train2["quality"]
cols = ["total_sulfur_dioxide","free_sulfur_dioxide","residual_sugar","fixed_acidity","volatile_acidity","alcohol","sulphates","pH","density","color_R"]
X2=train2[cols]
regr.fit(X2,y2)

# Commented out IPython magic to ensure Python compatibility.
ytrain_pred2 = regr.predict(X2)
print("In-sample Mean squared error: %.2f"
#       % mean_squared_error(y2, ytrain_pred2))

ytest2 = test2["quality"]
Xtest2=test2[cols]

# Commented out IPython magic to ensure Python compatibility.
ypred2 = regr.predict(Xtest2)
print("Out-of-sample Mean squared error: %.2f"
#       % mean_squared_error(ytest2, ypred2))

"""# LinReg on Segmented Data (80/20 splits for both segments)

# **White Wine Model **
"""

w_train, w_test = train_test_split(datawhite, test_size=0.2)

results_w = smf.ols('quality ~ free_sulfur_dioxide + residual_sugar + fixed_acidity + volatile_acidity + alcohol + sulphates + pH + density', data=datawhite).fit()
print(results_w.summary())

y_w = w_train["quality"]
cols_w = ["free_sulfur_dioxide","residual_sugar","fixed_acidity","volatile_acidity","alcohol","sulphates","pH","density"]
X_w=w_train[cols_w]
regr.fit(X_w,y_w)

# Commented out IPython magic to ensure Python compatibility.
ytrain_predw = regr.predict(X_w)
print("In-sample Mean squared error: %.2f"
#       % mean_squared_error(y_w, ytrain_predw))

# Commented out IPython magic to ensure Python compatibility.
ytestw = w_test["quality"]
Xtestw = w_test[cols_w]
ypredw = regr.predict(Xtestw)
print("Out-of-sample Mean squared error: %.2f"
#       % mean_squared_error(ytestw, ypredw))

"""# *RED WINE MODEL*"""

r_train, r_test = train_test_split(datared, test_size=0.2)

results_r = smf.ols('quality ~ free_sulfur_dioxide + residual_sugar + fixed_acidity + volatile_acidity + alcohol + sulphates + pH + density', data=datared).fit()
print(results_r.summary())

y_r = r_train["quality"]
cols_r = ["free_sulfur_dioxide","residual_sugar","fixed_acidity","volatile_acidity","alcohol","sulphates","pH","density"]
X_r=r_train[cols_r]
regr.fit(X_r,y_r)

# Commented out IPython magic to ensure Python compatibility.
ytrain_predr = regr.predict(X_r)
print("In-sample Mean squared error: %.2f"
#       % mean_squared_error(y_r, ytrain_predr))

# Commented out IPython magic to ensure Python compatibility.
ytestr = r_test["quality"]
Xtestr = r_test[cols_r]
ypredr = regr.predict(Xtestr)
print("Out-of-sample Mean squared error: %.2f"
#       % mean_squared_error(ytestr, ypredr))

"""## combine the result"""

y_both = pd.concat([y_w,y_r])

ytrain_predW=pd.DataFrame(ytrain_predw)
ytrain_predR=pd.DataFrame(ytrain_predr)

y_train_predboth = pd.concat([ytrain_predW,ytrain_predR])

# Commented out IPython magic to ensure Python compatibility.
print("In-sample Mean squared error: %.2f"
#       % mean_squared_error(y_both, y_train_predboth))

# Commented out IPython magic to ensure Python compatibility.
ytestboth = pd.concat([ytestw,ytestr])
Xtestboth = pd.concat([Xtestw,Xtestr])
                                          
ypredboth = pd.concat([pd.DataFrame(ypredw),pd.DataFrame(ypredr)])
print("Out-of-sample Mean squared error: %.2f"
#       % mean_squared_error(ytestboth, ypredboth))

from sklearn import svm
y = train["quality"]
cols = ["total_sulfur_dioxide","free_sulfur_dioxide","residual_sugar","fixed_acidity","volatile_acidity","alcohol","sulphates","pH","color_R"]
X=train[cols]

clf = svm.SVR(C=1.0, epsilon=0.2)
clf.fit(X, y)

# Commented out IPython magic to ensure Python compatibility.
ytrain_pred = clf.predict(X)
print("In-sample Mean squared error: %.2f"
#       % mean_squared_error(y, ytrain_pred))

ytest = test["quality"]
Xtest=test[cols]

# Commented out IPython magic to ensure Python compatibility.
ypred = clf.predict(Xtest)
print("Out-of-sample Mean squared error: %.2f"
#       % mean_squared_error(ytest, ypred))
